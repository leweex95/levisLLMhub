name: Distribution cleanup

on:
  push:
    tags:
      - '*'  # Trigger on any tag push

jobs:
  cleanup-dist:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # fetch all tags
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cleanup old dist files
        run: |
          if [ ! -d "dist" ]; then
            echo "No dist directory found, skipping cleanup"
            mkdir -p dist
            exit 0
          fi
          
          cd dist
          # Check if there are any files
          if [ "$(ls -A)" ]; then
            for tag in $(git tag --sort=-creatordate); do
                # Use nullglob to handle case when no files match
                shopt -s nullglob
                files=( *${tag}* )
                shopt -u nullglob
                
                if [ ${#files[@]} -gt 1 ]; then
                    # keep newest, delete older
                    newest="${files[-1]}"
                    echo "Keeping ${newest} for tag ${tag}"
                    for f in "${files[@]}"; do
                        if [ "$f" != "$newest" ]; then
                            echo "Removing ${f}"
                            rm "$f"
                        fi
                    done
                fi
            done
          else
            echo "No files in dist directory to clean up"
          fi
          cd ..

      - name: Configure Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Commit and push dist cleanup changes
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git add dist/
          git diff --quiet && git diff --staged --quiet || git commit -m "[Auto-commit] Cleanup dist directory [skip ci]"
          RETRIES=10
          for i in $(seq 1 $RETRIES); do
            git pull --rebase
            git push https://x-access-token:$PAT_TOKEN@github.com/${{ github.repository }} HEAD:master && break || {
              echo "Push failed, retrying ($i/$RETRIES)..."
              sleep 3
            }
          done
